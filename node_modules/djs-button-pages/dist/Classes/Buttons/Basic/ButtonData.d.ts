/**
 * Copyright Â© 2022 Danila Kononov (nickname: moony). All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import ButtonStyling from "../../../Interfaces/ButtonStyling";
import ButtonAction from "../../../Typings/ButtonAction";
import ButtonDisableWhen from "../../../Typings/ButtonDisableWhen";
/**
 * Class for storing and modifying button data.
 */
declare class ButtonData {
    /**
     * Class for storing and modifying button data.
     * @param {ButtonStyling | ButtonData} data Data from which to build ButtonData.
     */
    constructor(data?: ButtonStyling | ButtonData);
    private _style;
    private _action;
    private _disableWhen;
    /**
     * Style of this button.
     * @type {ButtonStyling | null}
     */
    get style(): ButtonStyling | null;
    /**
     * Represents an action that should be completed after the button is pressed.
     *
     * Either a number of a page or a function that determines number of a page.
     * @type {ButtonAction | null}
     */
    get action(): ButtonAction | null;
    /**
     * Represents a condition of disabling button.
     *
     * Either a number of a page or a function that determines number of a page.
     * @type {ButtonDisableWhen | null}
     */
    get disableWhen(): ButtonDisableWhen | null;
    /**
     * Sets button style.
     * @param {ButtonStyling} style Button style.
     * @returns {this} Button data.
     */
    setStyle(style: ButtonStyling): this;
    /**
     * Sets an action that should be completed when the button is pressed.
     * @param {ButtonAction} action Either a number of a page or a function that determines number of a page.
     * @returns {this} Button data.
     */
    protected _setAction(action: ButtonAction): this;
    /**
     * Sets a condition of disabling button.
     * @param {ButtonDisableWhen} disableWhen Either a number of a page or a function that determines number of a page.
     * @returns {this} Button data.
     */
    protected _setDisableWhen(disableWhen: ButtonDisableWhen): this;
    /**
     * Setups class from style or ButtonData.
     * @param {ButtonStyling | ButtonAction} data Style or data.
     * @returns {void}
     */
    private _setup;
}
export default ButtonData;
