/**
 * Copyright Â© 2022 Danila Kononov (nickname: moony). All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ButtonInteraction, InteractionCollector, Embed, EmbedBuilder } from "discord.js";
import FilterOptions from "../../../Interfaces/FilterOptions";
import CollectorOptions from "../../../Interfaces/CollectorOptions";
import ButtonData from "../../Buttons/Basic/ButtonData";
import OnStop from "../../../Typings/OnStop";
import AfterSending from "../../../Typings/AfterSending";
/**
 * Class for storing and modifying pagination data.
 */
declare class PaginationData {
    /**
     * Class for storing and modifying pagination data.
     * @param {PaginationData} data Pre-made PaginationData.
     */
    constructor(data?: PaginationData);
    private _isActive;
    private _filterOptions;
    private _collectorOptions;
    private _buttons;
    private _embeds;
    private _currentPage;
    private _time;
    private _collector;
    private _afterSending;
    private _onStop;
    /**
     * Indicates whether this pagination sent or not.
     * By default is false.
     * @type {boolean}
     */
    get isActive(): boolean;
    /**
     * How long the pagination will exist (in milliseconds).
     * By default is zero.
     * @type {number | null}
     */
    get time(): number | null;
    /**
     * The buttons of this pagination.
     * By default is an empty array.
     * @type {Array<ButtonData> | null}
     */
    get buttons(): Array<ButtonData> | null;
    /**
     * Embeds of this pagination.
     * By default is an empty array.
     * @type {Array<EmbedBuilder> | null}
     */
    get embeds(): Array<EmbedBuilder> | null;
    /**
     * Current page number. Zero-based.
     * By default is zero.
     * @type {number}
     */
    get currentPage(): number;
    /**
     * Options for filtering button interactions.
     * By default {@link singleUserAccess} and {@link noAccessReply} are true. And {@link noAccessReplyContent} is "You're disallowed to use this very pagination!".
     * @type {FilterOptions}
     */
    get filterOptions(): FilterOptions | null;
    /**
     * Options for collecting button interactions.
     * @type {CollectorOptions}
     */
    get collectorOptions(): CollectorOptions | null;
    /**
     * Collector that collects button interactions.
     * @type {InteractionCollector<ButtonInteraction> | null}
     */
    get collector(): InteractionCollector<ButtonInteraction> | null;
    /**
     * Action that will be completed after the pagination was sent.
     * @type {AfterSending | null}
     */
    get afterSending(): AfterSending | null;
    /**
     * Action that will be completed after the pagination was stopped.
     * @type {OnStop | null}
     */
    get onStop(): OnStop | null;
    /**
     * Gets {@link ButtonData} by it's customId.
     * @param {string} customId Button's customId. Should be a string.
     * @returns {ButtonData | undefined} Button data.
     */
    getButtonByCustomId(customId: string): ButtonData | undefined;
    /**
     * Sets action that will be completed after the pagination was sent.
     * @param {AfterSending} action Action that will be completed.
     * @returns {this} Pagination.
     */
    setAfterSendingAction(action: AfterSending): this;
    /**
     * Sets action that will be completed after the pagination was stopped.
     * @param {OnStop} action Action that will be completed.
     * @returns {this} Pagination.
     */
    setOnStopAction(action: OnStop): this;
    /**
     * Sets pagination active phase duration.
     * @param {number} time Time in milliseconds.
     * @param {boolean} bypassLibraryLimits Should the time bypass library limit or not.
     * @returns {this} Pagination.
     */
    setTime(time: number, bypassLibraryLimits?: boolean): this;
    /**
     * Inserts embeds.
     * @param {EmbedBuilder | Embed | Array<EmbedBuilder | Embed>} embeds Embed(-s) that is/are meant to be inserted.
     * @param {number} index Zero-based location in the array there the embed(-s) should be inserted.
     * @returns {this} Pagination.
     */
    insertEmbeds(embeds: EmbedBuilder | Embed | Array<EmbedBuilder | Embed>, index?: number): this;
    /**
     * Removes embed(-s) by it's/theirs index(-es) in the array of embeds.
     * @param {number} index Zero-based location in the array from which to start removing embeds.
     * @param {number} count Quantity of embeds to remove.
     * @returns {this} Pagination.
     */
    removeEmbeds(index: number, count?: number): this;
    /**
     * Sets embed(-s). Overrides current embed(-s).
     * @param {EmbedBuilder | Embed | Array<EmbedBuilder | Embed>} embeds Embed(-s) that is/are meant to be set.
     * @returns {this} Pagination.
     */
    setEmbeds(embeds: EmbedBuilder | Embed | Array<EmbedBuilder | Embed>): this;
    /**
     * Sets button(-s). Overrides current button(-s).
     * @param {ButtonData | Array<ButtonData>} buttons Button(-s) that is/are meant to be set.
     * @returns {this} Pagination.
     */
    setButtons(buttons: ButtonData | Array<ButtonData>): this;
    /**
     * Sets filter options. Overrides current options.
     * @param {FilterOptions} options Options for filtering out button interactions.
     * @returns {this} Pagination.
     */
    setFilterOptions(options: FilterOptions): this;
    /**
     * Sets collector options. Overrides current options.
     * @param {FilterOptions} options Options for collecting button interactions.
     * @returns {this} Pagination.
     */
    setCollectorOptions(options: CollectorOptions): this;
    /**
     * Sets active state.
     * @param {boolean} active Whether to set pagination as active.
     * @returns {boolean} Active state.
     */
    protected _setActive(active?: boolean): boolean;
    /**
     * Sets current page number.
     * @param {number} page Number of the page.
     * @returns {number} Number of the current page.
     */
    protected _setCurrentPage(page?: number): number;
    /**
     * Sets life-time of pagination.
     * @param {number} time Time in milliseconds.
     * @returns {number} Time in milliseconds.
     */
    protected _setTime(time: number): number;
    /**
     * Sets collector of the pagination.
     * @param {InteractionCollector<ButtonInteraction>} collector Collector that collects button interactions.
     * @returns {InteractionCollector<ButtonInteraction>} Collector that collects button interactions.
     */
    protected _setCollector(collector: InteractionCollector<ButtonInteraction>): InteractionCollector<ButtonInteraction>;
    /**
     * Setups pagination data from another pagination data.
     * @param {PaginationData} data PaginationData.
     * @returns {void}
     */
    private _setup;
}
export default PaginationData;
