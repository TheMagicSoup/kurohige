/**
 * Copyright Â© 2022 Danila Kononov (nickname: moony). All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ButtonInteraction, Message, ActionRowBuilder, ButtonBuilder, ReplyMessageOptions, MessageOptions, User, InteractionReplyOptions, InteractionCollector, Interaction } from "discord.js";
import PaginationData from "./PaginationData";
/**
 * Base pagination class that works with collector and it's events.
 * @template {ReplyMessageOptions | MessageOptions | InteractionReplyOptions} T
 */
declare abstract class BasePagination<T extends ReplyMessageOptions | MessageOptions | InteractionReplyOptions> extends PaginationData {
    /**
     * Base pagination class that works with collector and it's events.
     * @param {PaginationData} data Data from which to build BasePagination.
     */
    protected constructor(data?: PaginationData);
    private _messageOptions;
    abstract send(sendTo: unknown, user?: User): Promise<void>;
    /**
     * Options for sending out message.
     * @type {T | null}
     */
    get messageOptions(): T | null;
    /**
     * Sets options for sending out message.
     * @param {T} options Options for sending out message.
     * @returns {this} Pagination.
     */
    setMessageOptions(options: T): this;
    /**
     * Method that handles `collect` event.
     * @param {ButtonInteraction} interaction Interaction that the collector got.
     * @returns {Promise<void>} Updates pagination.
     */
    protected _collected(interaction: ButtonInteraction): Promise<void>;
    /**
     * Method that handles `stop` event.
     * @param {string} reason Reason of collector's stop event.
     * @param {Message | Interaction} message Message that was sent or Interaction that was replied.
     * @returns {Promise<void>} Updates pagination.
     */
    protected _stop(reason: string, message: Message | Interaction): Promise<void>;
    /**
     * Gets actionRows with buttons for specific page.
     * @param {number} page Page number.
     * @returns {Promise<Array<ActionRowBuilder<ButtonBuilder>>>} ActionRows.
     */
    protected _getActionRowsByPage(page: number): Promise<Array<ActionRowBuilder<ButtonBuilder>>>;
    /**
     * Disables or enables button.
     * @param {ButtonStyling} buttonData Raw button data.
     * @param {ButtonBuilder} buttonBuilder Button builder.
     * @param {number} page Page number.
     * @returns {Promise<void>}
     */
    private _disableButton;
    /**
     * Builds action rows with buttons.
     * @param {boolean} disabled Buttons should be disabled or not.
     * @returns {Array<ActionRowBuilder<ButtonBuilder>>} ActionRows.
     */
    private _buildActionRows;
    /**
     * Forms collector.
     * @param {Message} message Message that collector should stick to.
     * @param {User} user Used only if {@link singleUserAccess} is true. Needed only if only one user should be able to use pagination.
     * @returns {InteractionCollector<ButtonInteraction>} Interaction Collector.
     */
    protected _formCollector(message: Message, user?: User): InteractionCollector<ButtonInteraction>;
    /**
     * Forms filter for InteractionCollector.
     * @param {Message} message Message that collector should stick to.
     * @param {User} user Needed only if one user should be able to use pagination and filterOptions onlyOneUser is true.
     * @returns {(interaction:ButtonInteraction) => Promise<boolean>} Function that filters out interactions.
     */
    private _formFilter;
    /**
     * Gets page number from customId of button that was pressed.
     * @param {string} customId CustomId of button that was pressed.
     * @returns {Promise<number>} Number of page.
     */
    private _getPageNumber;
    /**
     * Setups data from another base pagination.
     * @param {BasePagination<T>} data BasePagination.
     * @returns {void}
     */
    private _setupData;
}
export default BasePagination;
